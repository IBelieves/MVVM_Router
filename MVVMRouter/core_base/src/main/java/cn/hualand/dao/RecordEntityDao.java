package cn.hualand.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.hualand.util.StringListConverter;
import java.util.ArrayList;

import cn.hualand.entity.RecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_ENTITY".
*/
public class RecordEntityDao extends AbstractDao<RecordEntity, Long> {

    public static final String TABLENAME = "RECORD_ENTITY";

    /**
     * Properties of entity RecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Create_time = new Property(1, Long.class, "create_time", false, "CREATE_TIME");
        public final static Property Img_url = new Property(2, String.class, "img_url", false, "IMG_URL");
        public final static Property User_name = new Property(3, String.class, "user_name", false, "USER_NAME");
        public final static Property User_pic = new Property(4, String.class, "user_pic", false, "USER_PIC");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Msg_imgs = new Property(6, String.class, "msg_imgs", false, "MSG_IMGS");
    }

    private final StringListConverter msg_imgsConverter = new StringListConverter();

    public RecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: create_time
                "\"IMG_URL\" TEXT," + // 2: img_url
                "\"USER_NAME\" TEXT," + // 3: user_name
                "\"USER_PIC\" TEXT," + // 4: user_pic
                "\"CONTENT\" TEXT," + // 5: content
                "\"MSG_IMGS\" TEXT);"); // 6: msg_imgs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(3, img_url);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String user_pic = entity.getUser_pic();
        if (user_pic != null) {
            stmt.bindString(5, user_pic);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        ArrayList msg_imgs = entity.getMsg_imgs();
        if (msg_imgs != null) {
            stmt.bindString(7, msg_imgsConverter.convertToDatabaseValue(msg_imgs));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(2, create_time);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(3, img_url);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String user_pic = entity.getUser_pic();
        if (user_pic != null) {
            stmt.bindString(5, user_pic);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        ArrayList msg_imgs = entity.getMsg_imgs();
        if (msg_imgs != null) {
            stmt.bindString(7, msg_imgsConverter.convertToDatabaseValue(msg_imgs));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordEntity readEntity(Cursor cursor, int offset) {
        RecordEntity entity = new RecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // create_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_pic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : msg_imgsConverter.convertToEntityProperty(cursor.getString(offset + 6)) // msg_imgs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setImg_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_pic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMsg_imgs(cursor.isNull(offset + 6) ? null : msg_imgsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
